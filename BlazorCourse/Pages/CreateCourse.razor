@page "/CreateCourse"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@using BlazorCourse.Models
@using Blazorise
@using Blazorise.Bootstrap
@inherits AlertComponent

@if (!string.IsNullOrEmpty(alertMessage))
{
    <div class="alert alert-@alertType alert-dismissible" role="alert">
        @alertMessage
        <button type="button" class="btn-close" aria-label="Close" @onclick="ClearAlert"></button>
    </div>
}
<h3>@(IsEdit ? "Edit Course" : "Create Course") !</h3>
<br />


<div class="container">
    <form @onsubmit="SaveCourse">
        <div class="mb-3">
            <label for="courseName" class="form-label">Course Name</label>
            <input type="text" class="form-control" id="courseName" @bind="courseModel.CourseName">
        </div>
        <div class="mb-3">
            <label for="courseDescription" class="form-label">Course Description</label>
            <textarea class="form-control" id="courseDescription" rows="3" @bind="courseModel.CourseDescription"></textarea>
        </div>
        <div class="mb-3">
            <label for="courseDuration" class="form-label">Course Duration (in hours)</label>
            <input type="text" placeholder="Exmaple: 20h 30 min" class="form-control" id="courseDuration" @bind="courseModel.CourseDuration">
        </div>
        <div class="mb-3">
            <label for="coursePrice" class="form-label">Course Price</label>
            <input type="number" class="form-control" id="coursePrice" @bind="courseModel.CoursePrice">
        </div>
        <div class="mb-3">
            <label for="courseCategory" class="form-label">Course Category</label>
            <select class="form-select" id="courseCategory" @bind="@selectedCategoryId">
                <option value="">Select Category</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-primary">@(IsEdit ? "Update" : "Create")</button>
    </form>
</div>


@code {
    private Course courseModel = new Course();
    private List<CourseCategory> categories = new List<CourseCategory>();
    private int selectedCategoryId;
    private bool IsEdit;
    private int EditCourseId;

    protected override async Task OnInitializedAsync()
    {
        var query = new Uri(NavigationManager.Uri).Query;
        var queryDictionary = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(query);
        if (queryDictionary.ContainsKey("edit"))
        {
            IsEdit = true;
            EditCourseId = int.Parse(queryDictionary["id"]);
            var existingCourse = await httpClient.GetFromJsonAsync<Course>($"https://localhost:7045/api/Course/{EditCourseId}");
            if (existingCourse != null)
            {
                courseModel = existingCourse;
                selectedCategoryId = existingCourse.CourseCategory.Id;
            }
        }
        categories = await httpClient.GetFromJsonAsync<List<CourseCategory>>("https://localhost:7045/api/CourseCategory");
    }

    private async Task SaveCourse()
    {
        courseModel.CourseCategory = categories.FirstOrDefault(c => c.Id == selectedCategoryId);
        HttpResponseMessage response;
        if (IsEdit)
        {
            response = await httpClient.PutAsJsonAsync($"https://localhost:7045/api/Course/{EditCourseId}", courseModel);
        }
        else
        {
            response = await httpClient.PostAsJsonAsync("https://localhost:7045/api/Course", courseModel);
        }

        if (response.IsSuccessStatusCode)
        {
            ShowAlert(IsEdit ? "Course updated successfully." : "Course created successfully.", "success");
            StateHasChanged();

            await Task.Delay(3000);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ShowAlert($"Failed to {(IsEdit ? "update" : "create")} course: {errorMessage}", "danger");
        }
    }
}
